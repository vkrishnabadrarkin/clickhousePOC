import csv
import pandas
from ipaddress import ip_address, ip_network, ip_interface
# import ast
#
# badr = "[(80,'https','TCP'),(443,'https','TCP'),(123,'ntp','UDP'),(22,'ssh','TCP'),(53,'dns','UDP'),(445,'microsoft-ds','UDP'),(389,'ldap','UDP'),(514,'syslog','TCP'),(137,'netbios-ns','TCP'),(902,'ideafarm-door','TCP')]"
#
# badr = ast.literal_eval(badr)
# print(badr[1][1])
k = enumerate(['name' ,'time', 'modelkey_cid' , 'modelkey_otype' , 'modelkey_oid' , 'port.start' , 'port.end' , 'port.display' , 'port.ianaName' , 'port.ianaPortDisplay' , 'Protocol' , 'srcIP.prefixLength' , 'srcIP.ipAddress' , 'srcIP.netMask' , 'srcIP.networkAddress' , 'srcIP.cidr' , 'srcIP.start' , 'srcIP.end' , 'srcIP.ipaddresstype' , 'srcIP.privateaddress' , 'srcIP.Source' , 'srcIP.Ipmetadata_domain' , 'srcIP.Ipmetadata_isp' , 'dstIP.prefixLength' , 'dstIP.ipAddress' , 'dstIP.netMask' , 'dstIP.networkAddress' , 'dstIP.cidr' , 'dstIP.start' , 'dstIP.end' , 'dstIP.ipaddresstype' , 'dstIP.privateaddress' , 'dstIP.Source' , 'dstIP.Ipmetadata_domain' , 'dstIP.Ipmetadata_isp' , 'trafficType' , 'shared' , 'networkLayer' , 'srcsubnet.prefixLength' , 'srcsubnet.ipAddress' , 'srcsubnet.netMask' , 'srcsubnet.networkAddress' , 'srcsubnet.cidr' , 'srcsubnet.start' , 'srcsubnet.end' , 'srcsubnet.ipaddresstype' , 'srcsubnet.privateaddress' , 'srcsubnet.Source' , 'srcsubnet.Ipmetadata_domain' , 'srcsubnet.Ipmetadata_isp' , 'dstsubnet.prefixLength' , 'dstsubnet.ipAddress' , 'dstsubnet.netMask' , 'dstsubnet.networkAddress' , 'dstsubnet.cidr' , 'dstsubnet.start' , 'dstsubnet.end' , 'dstsubnet.ipaddresstype' , 'dstsubnet.privateaddress' , 'dstsubnet.Source' , 'dstsubnet.Ipmetadata_domain' , 'dstsubnet.Ipmetadata_isp' , 'withinhost' , 'typetag' , '__searchTags' , '__related_entities' , 'srcVmTags' , 'dstVmTags' , 'attribute.reportedaction' , 'attribute.reportedRuleId' , 'attribute.collectorId' , 'attribute_rule.name' , 'attribute_rule.modelkey_otype' , 'attribute_rule.modelkey_oid' , 'attribute_firewallmanager.name' , 'attribute_firewallmanager.modelkey_otype' , 'attribute_firewallmanager.modelkey_oid' , 'activedpIds' , 'typeTagsPacked' , 'protectionStatus' , 'flowAction' , 'srcDnsInfo.ipDomain' , 'srcDnsInfo.ip' , 'srcDnsInfo.domainName' , 'srcDnsInfo.hostName' , 'srcDnsInfo.source' , 'dstDnsInfo.ipDomain' , 'dstDnsInfo.ip' , 'dstDnsInfo.domainName' , 'dstDnsInfo.hostName' , 'dstDnsInfo.source' , 'reporterEntity.collectorId' , 'reporterEntity_reporter.name' , 'reporterEntity_reporter.modelkey_otype' , 'reporterEntity_reporter.modelkey_oid' , 'SchemaVersion' , 'lastActivity' , 'activity' , 'srck8Info.k8scollectorId' , 'srck8Info_k8sservice.name' , 'srck8Info_k8sservice.modelkey_otype' , 'srck8Info_k8sservice.modelkey_oid' , 'srck8Info_k8scluster.name' , 'srck8Info_k8scluster.modelkey_otype' , 'srck8Info_k8scluster.modelkey_oid' , 'srck8Info_k8snamespace.name' , 'srck8Info_k8snamespace.modelkey_otype' , 'srck8Info_k8snamespace.modelkey_oid' , 'srck8Info_k8snode.name' , 'srck8Info_k8snode.modelkey_otype' , 'srck8Info_k8snode.modelkey_oid' , 'dstk8Info.k8scollectorId' , 'dstk8Info_k8sservice.name' , 'dstk8Info_k8sservice.modelkey_otype' , 'dstk8Info_k8sservice.modelkey_oid' , 'dstk8Info_k8scluster.name' , 'dstk8Info_k8scluster.modelkey_otype' , 'dstk8Info_k8scluster.modelkey_oid' , 'dstk8Info_k8snamespace.name' , 'dstk8Info_k8snamespace.modelkey_otype' , 'dstk8Info_k8snamespace.modelkey_oid' , 'dstk8Info_k8snode.name' , 'dstk8Info_k8snode.modelkey_otype' , 'dstk8Info_k8snode.modelkey_oid' , 'srcIpEntity.name' , 'srcIpEntity.modelkey_otype' , 'srcIpEntity.modelkey_oid' , 'dstIpEntity.name' , 'dstIpEntity.modelkey_otype' , 'dstIpEntity.modelkey_oid' , 'srcNic.name' , 'srcNic.modelkey_otype' , 'srcNic.modelkey_oid' , 'dstNic.name' , 'dstNic.modelkey_otype' , 'dstNic.modelkey_oid' , 'srcVm.name' , 'srcVm.modelkey_otype' , 'srcVm.modelkey_oid' , 'dstVm.name' , 'dstVm.modelkey_otype' , 'dstVm.modelkey_oid' , 'srcSg.name' , 'srcSg.modelkey_otype' , 'srcSg.modelkey_oid' , 'dstSg.name' , 'dstSg.modelkey_otype' , 'dstSg.modelkey_oid' , 'srcIpSet.name' , 'srcIpSet.modelkey_otype' , 'srcIpSet.modelkey_oid' , 'dstIpSet.name' , 'dstIpSet.modelkey_otype' , 'dstIpSet.modelkey_oid' , 'srcSt.name' , 'srcSt.modelkey_otype' , 'srcSt.modelkey_oid' , 'dstSt.name' , 'dstSt.modelkey_otype' , 'dstSt.modelkey_oid' , 'srcL2Net.name' , 'srcL2Net.modelkey_otype' , 'srcL2Net.modelkey_oid' , 'dstL2Net.name' , 'dstL2Net.modelkey_otype' , 'dstL2Net.modelkey_oid' , 'srcGroup.name' , 'srcGroup.modelkey_otype' , 'srcGroup.modelkey_oid' , 'dstGroup.name' , 'dstGroup.modelkey_otype' , 'dstGroup.modelkey_oid' , 'srcCluster.name' , 'srcCluster.modelkey_otype' , 'srcCluster.modelkey_oid' , 'dstCluster.name' , 'dstCluster.modelkey_otype' , 'dstCluster.modelkey_oid' , 'srcRp.name' , 'srcRp.modelkey_otype' , 'srcRp.modelkey_oid' , 'dstRp.name' , 'dstRp.modelkey_otype' , 'dstRp.modelkey_oid' , 'srcDc.name' , 'srcDc.modelkey_otype' , 'srcDc.modelkey_oid' , 'dstDc.name' , 'dstDc.modelkey_otype' , 'dstDc.modelkey_oid' , 'srcHost.name' , 'srcHost.modelkey_otype' , 'srcHost.modelkey_oid' , 'dstHost.name' , 'dstHost.modelkey_otype' , 'dstHost.modelkey_oid' , 'svcEP.name' , 'svcEP.modelkey_otype' , 'svcEP.modelkey_oid' , 'srcManagers.name' , 'srcManagers.modelkey_otype' , 'srcManagers.modelkey_oid' , 'dstManagers.name' , 'dstManagers.modelkey_otype' , 'dstManagers.modelkey_oid' ,'flowDomain.name', 'flowDomain.modelkey_otype', 'flowDomain.modelkey_oid', 'srcLookupDomain.name' , 'srcLookupDomain.modelkey_otype' , 'srcLookupDomain.modelkey_oid' , 'dstLookupDomain.name' , 'dstLookupDomain.modelkey_otype' , 'dstLookupDomain.modelkey_oid' , 'srcVpc.name' , 'srcVpc.modelkey_otype' , 'srcVpc.modelkey_oid' , 'dstVpc.name' , 'dstVpc.modelkey_otype' , 'dstVpc.modelkey_oid' , 'srcTransportNode.name' , 'srcTransportNode.modelkey_otype' , 'srcTransportNode.modelkey_oid' , 'dstTransportNode.name' , 'dstTransportNode.modelkey_otype' , 'dstTransportNode.modelkey_oid' , 'srcDvpg.name' , 'srcDvpg.modelkey_otype' , 'srcDvpg.modelkey_oid' , 'dstDvpg.name' , 'dstDvpg.modelkey_otype' , 'dstDvpg.modelkey_oid' , 'srcDvs.name' , 'srcDvs.modelkey_otype' , 'srcDvs.modelkey_oid' , 'dstDvs.name' , 'dstDvs.modelkey_otype' , 'dstDvs.modelkey_oid','metricData.totalBytes','metricData.srcBytes', 'metricData.dstBytes','metricData.totalPackets', 'metricData.allowedSessionCount','metricData.nsxTcpRtt_abs_max_ms', 'metricData.nsxTcpRtt_abs_avg_ms'])
print(list(k))