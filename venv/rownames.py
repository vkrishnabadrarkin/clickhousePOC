import csv
# with open('test.csv', 'w') as f:
#     for key in my_dict.keys():
#         f.write("%s,%s\n"%(key,my_dict[key]))
#import csv
flagg = 0
csv_columns = ['name' , 'modelkey_cid' , 'modelkey_otype' , 'modelkey_oid' , 'port.fstart' , 'port.fend' , 'port.display' , 'port.ianaName' , 'port.ianaPortDisplay' , 'fProtocol' , 'srcIP.prefixLength' , 'srcIP.ipAddress' , 'srcIP.netMask' , 'srcIP.networkAddress' , 'srcIP.cidr' , 'srcIP.fstart' , 'srcIP.fend' , 'srcIP.ipaddresstype' , 'srcIP.privateaddress' , 'srcIP.Source' , 'srcIP.Ipmetadata_domain' , 'srcIP.Ipmetadata_isp' , 'dstIP.prefixLength' , 'dstIP.ipAddress' , 'dstIP.netMask' , 'dstIP.networkAddress' , 'dstIP.cidr' , 'dstIP.fstart' , 'dstIP.fend' , 'dstIP.ipaddresstype' , 'dstIP.privateaddress' , 'dstIP.Source' , 'dstIP.Ipmetadata_domain' , 'dstIP.Ipmetadata_isp' , 'TrfficType' , 'shared' , 'networkLayer' , 'srcsubnet.prefixLength' , 'srcsubnet.ipAddress' , 'srcsubnet.netMask' , 'srcsubnet.networkAddress' , 'srcsubnet.cidr' , 'srcsubnet.fstart' , 'srcsubnet.fend' , 'srcsubnet.ipaddresstype' , 'srcsubnet.privateaddress' , 'srcsubnet.Source' , 'srcsubnet.Ipmetadata_domain' , 'srcsubnet.Ipmetadata_isp' , 'dstsubnet.prefixLength' , 'dstsubnet.ipAddress' , 'dstsubnet.netMask' , 'dstsubnet.networkAddress' , 'dstsubnet.cidr' , 'dstsubnet.fstart' , 'dstsubnet.fend' , 'dstsubnet.ipaddresstype' , 'dstsubnet.privateaddress' , 'dstsubnet.Source' , 'dstsubnet.Ipmetadata_domain' , 'dstsubnet.Ipmetadata_isp' , 'withinhost' , 'typetag' , '__searchTags' , '__related_entities' , 'srcVmTags' , 'dstVmTags' , 'attribute.reportedaction' , 'attribute.reportedRuleId' , 'attribute.collectorId' , 'attribute_rule.name' , 'attribute_rule.modelkey_otype' , 'attribute_rule.modelkey_oid' , 'attribute_firewallmanager.name' , 'attribute_firewallmanager.modelkey_otype' , 'attribute_firewallmanager.modelkey_oid' , 'activedpIds' , 'typeTagsPacked' , 'protectionStatus' , 'flowAction' , 'srcDnsInfo.ipDomain' , 'srcDnsInfo.ip' , 'srcDnsInfo.domainName' , 'srcDnsInfo.hostName' , 'srcDnsInfo.source' , 'dstDnsInfo.ipDomain' , 'dstDnsInfo.ip' , 'dstDnsInfo.domainName' , 'dstDnsInfo.hostName' , 'dstDnsInfo.source' , 'reporterEntity.collectorId' , 'reporterEntity_reporter.name' , 'reporterEntity_reporter.modelkey_otype' , 'reporterEntity_reporter.modelkey_oid' , 'SchemaVersion' , 'lastActivity' , 'activity' , 'srck8Info.k8scollectorId' , 'srck8Info_k8sservice.name' , 'srck8Info_k8sservice.modelkey_otype' , 'srck8Info_k8sservice.modelkey_oid' , 'srck8Info_k8scluster.name' , 'srck8Info_k8scluster.modelkey_otype' , 'srck8Info_k8scluster.modelkey_oid' , 'srck8Info_k8snamespace.name' , 'srck8Info_k8snamespace.modelkey_otype' , 'srck8Info_k8snamespace.modelkey_oid' , 'srck8Info_k8snode.name' , 'srck8Info_k8snode.modelkey_otype' , 'srck8Info_k8snode.modelkey_oid' , 'dstk8Info.k8scollectorId' , 'dstk8Info_k8sservice.name' , 'dstk8Info_k8sservice.modelkey_otype' , 'dstk8Info_k8sservice.modelkey_oid' , 'dstk8Info_k8scluster.name' , 'dstk8Info_k8scluster.modelkey_otype' , 'dstk8Info_k8scluster.modelkey_oid' , 'dstk8Info_k8snamespace.name' , 'dstk8Info_k8snamespace.modelkey_otype' , 'dstk8Info_k8snamespace.modelkey_oid' , 'dstk8Info_k8snode.name' , 'dstk8Info_k8snode.modelkey_otype' , 'dstk8Info_k8snode.modelkey_oid' , 'lbflowtype' , 'loadBalancerInfo.type' , 'loadBalancerInfo.collectorId' , 'loadBalancerInfo.relevantPort' , 'loadBalancerInfo_loadbalancervIP.prefixLength' , 'loadBalancerInfo_loadbalancervIP.ipAddress' , 'loadBalancerInfo_loadbalancervIP.netMask' , 'loadBalancerInfo_loadbalancervIP.networkAddress' , 'loadBalancerInfo_loadbalancervIP.cidr' , 'loadBalancerInfo_loadbalancervIP.fstart' , 'loadBalancerInfo_loadbalancervIP.fend' , 'loadBalancerInfo_loadbalancervIP.ipaddresstype' , 'loadBalancerInfo_loadbalancervIP.privateaddress' , 'loadBalancerInfo_loadbalancervIP.Source' , 'loadBalancerInfo_loadbalancervIP.Ipmetadata_domain' , 'loadBalancerInfo_loadbalancervIP.Ipmetadata_isp' , 'loadBalancerInfo_loadbalancerinternalIP.prefixLength' , 'loadBalancerInfo_loadbalancerinternalIP.ipAddress' , 'loadBalancerInfo_loadbalancerinternalIP.netMask' , 'loadBalancerInfo_loadbalancerinternalIP.networkAddress' , 'loadBalancerInfo_loadbalancerinternalIP.cidr' , 'loadBalancerInfo_loadbalancerinternalIP.fstart' , 'loadBalancerInfo_loadbalancerinternalIP.fend' , 'loadBalancerInfo_loadbalancerinternalIP.ipaddresstype' , 'loadBalancerInfo_loadbalancerinternalIP.privateaddress' , 'loadBalancerInfo_loadbalancerinternalIP.Source' , 'loadBalancerInfo_loadbalancerinternalIP.Ipmetadata_domain' , 'loadBalancerInfo_loadbalancerinternalIP.Ipmetadata_isp' , 'srcIpEntity.name' , 'srcIpEntity.modelkey_otype' , 'srcIpEntity.modelkey_oid' , 'dstIpEntity.name' , 'dstIpEntity.modelkey_otype' , 'dstIpEntity.modelkey_oid' , 'srcNic.name' , 'srcNic.modelkey_otype' , 'srcNic.modelkey_oid' , 'dstNic.name' , 'dstNic.modelkey_otype' , 'dstNic.modelkey_oid' , 'srcVm.name' , 'srcVm.modelkey_otype' , 'srcVm.modelkey_oid' , 'dstVm.name' , 'dstVm.modelkey_otype' , 'dstVm.modelkey_oid' , 'srcSg.name' , 'srcSg.modelkey_otype' , 'srcSg.modelkey_oid' , 'dstSg.name' , 'dstSg.modelkey_otype' , 'dstSg.modelkey_oid' , 'srcIpSet.name' , 'srcIpSet.modelkey_otype' , 'srcIpSet.modelkey_oid' , 'dstIpSet.name' , 'dstIpSet.modelkey_otype' , 'dstIpSet.modelkey_oid' , 'srcSt.name' , 'srcSt.modelkey_otype' , 'srcSt.modelkey_oid' , 'dstSt.name' , 'dstSt.modelkey_otype' , 'dstSt.modelkey_oid' , 'srcL2Net.name' , 'srcL2Net.modelkey_otype' , 'srcL2Net.modelkey_oid' , 'dstL2Net.name' , 'dstL2Net.modelkey_otype' , 'dstL2Net.modelkey_oid' , 'srcGroup.name' , 'srcGroup.modelkey_otype' , 'srcGroup.modelkey_oid' , 'dstGroup.name' , 'dstGroup.modelkey_otype' , 'dstGroup.modelkey_oid' , 'srcCluster.name' , 'srcCluster.modelkey_otype' , 'srcCluster.modelkey_oid' , 'dstCluster.name' , 'dstCluster.modelkey_otype' , 'dstCluster.modelkey_oid' , 'srcRp.name' , 'srcRp.modelkey_otype' , 'srcRp.modelkey_oid' , 'dstRp.name' , 'dstRp.modelkey_otype' , 'dstRp.modelkey_oid' , 'srcDc.name' , 'srcDc.modelkey_otype' , 'srcDc.modelkey_oid' , 'dstDc.name' , 'dstDc.modelkey_otype' , 'dstDc.modelkey_oid' , 'srcHost.name' , 'srcHost.modelkey_otype' , 'srcHost.modelkey_oid' , 'dstHost.name' , 'dstHost.modelkey_otype' , 'dstHost.modelkey_oid' , 'svcEP.name' , 'svcEP.modelkey_otype' , 'svcEP.modelkey_oid' , 'srcManagers.name' , 'srcManagers.modelkey_otype' , 'srcManagers.modelkey_oid' , 'dstManagers.name' , 'dstManagers.modelkey_otype' , 'dstManagers.modelkey_oid' ,'flowDomain.modelkey_otype', 'flowDomain.name', 'flowDomain.modelkey_oid', 'srcLookupDomain.name' , 'srcLookupDomain.modelkey_otype' , 'srcLookupDomain.modelkey_oid' , 'dstLookupDomain.name' , 'dstLookupDomain.modelkey_otype' , 'dstLookupDomain.modelkey_oid' , 'srcVpc.name' , 'srcVpc.modelkey_otype' , 'srcVpc.modelkey_oid' , 'dstVpc.name' , 'dstVpc.modelkey_otype' , 'dstVpc.modelkey_oid' , 'srcTransportNode.name' , 'srcTransportNode.modelkey_otype' , 'srcTransportNode.modelkey_oid' , 'dstTransportNode.name' , 'dstTransportNode.modelkey_otype' , 'dstTransportNode.modelkey_oid' , 'srcDvpg.name' , 'srcDvpg.modelkey_otype' , 'srcDvpg.modelkey_oid' , 'dstDvpg.name' , 'dstDvpg.modelkey_otype' , 'dstDvpg.modelkey_oid' , 'srcDvs.name' , 'srcDvs.modelkey_otype' , 'srcDvs.modelkey_oid' , 'dstDvs.name' , 'dstDvs.modelkey_otype' , 'dstDvs.modelkey_oid']
my_dict = [{"name": "10.0.1.77VM33310.0.29.193", "modelkey_cid": 12345, "modelkey_otype": 515, "modelkey_oid": 1000000, "port.fstart": [2055], "port.fend": [2055], "port.display": ["2055"], "port.ianaName": ["other"], "port.ianaPortDisplay": ["[2055]other"], "fProtocol": "UDP", "srcIP.prefixLength": [27], "srcIP.ipAddress": ["10.0.1.77"], "srcIP.netMask": ["255.255.255.224"], "srcIP.networkAddress": ["10.0.1.6"], "srcIP.cidr": ["10.0.1.64/27"], "srcIP.fstart": [167772480], "srcIP.fend": [167772511], "srcIP.ipaddresstype": ["SUBNET"], "srcIP.privateaddress": [1], "srcIP.Source": ["UNKNOWN"], "srcIP.Ipmetadata_domain": ["UNKNOWN"], "srcIP.Ipmetadata_isp": ["UNKNOWN"], "dstIP.prefixLength": [27], "dstIP.ipAddress": ["10.0.29.193"], "dstIP.netMask": ["255.255.255.224"], "dstIP.networkAddress": ["10.0.29.19"], "dstIP.cidr": ["10.0.29.192/27"], "dstIP.fstart": [167779776], "dstIP.fend": [167779807], "dstIP.ipaddresstype": ["SUBNET"], "dstIP.privateaddress": [1], "dstIP.Source": ["UNKNOWN"], "dstIP.Ipmetadata_domain": ["UNKNOWN"], "dstIP.Ipmetadata_isp": ["UNKNOWN"], "TrfficType": "INTERNET_TRAFFIC", "shared": 1, "networkLayer": "LAYER_3", "srcsubnet.prefixLength": [19], "srcsubnet.ipAddress": ["10.0.1.77/19"], "srcsubnet.netMask": ["255.255.224.0"], "srcsubnet.networkAddress": ["10.0.0."], "srcsubnet.cidr": ["10.0.0.0/19"], "srcsubnet.fstart": [167772160], "srcsubnet.fend": [167780351], "srcsubnet.ipaddresstype": ["SUBNET"], "srcsubnet.privateaddress": [1], "srcsubnet.Source": ["UNKNOWN"], "srcsubnet.Ipmetadata_domain": ["UNKNOWM"], "srcsubnet.Ipmetadata_isp": ["UNKNOWM"], "dstsubnet.prefixLength": [19], "dstsubnet.ipAddress": ["10.0.29.193/19"], "dstsubnet.netMask": ["255.255.224.0"], "dstsubnet.networkAddress": ["10.0.0."], "dstsubnet.cidr": ["10.0.0.0/19"], "dstsubnet.fstart": [167772160], "dstsubnet.fend": [167780351], "dstsubnet.ipaddresstype": ["SUBNET"], "dstsubnet.privateaddress": [1], "dstsubnet.Source": ["UNKNOWN"], "dstsubnet.Ipmetadata_domain": ["UNKNOWM"], "dstsubnet.Ipmetadata_isp": ["UNKNOWM"], "withinhost": 0, "typetag": "TAG_DNAT_IP_MULTI_NAT_RULE", "__searchTags": ["10.0.1.77VM33310.0.29.193", "VM333", "VM7617"], "__related_entities": ["flows", "traffic"], "srcVmTags": ["admin@vmware.com", "badri@vmware.com"], "dstVmTags": ["vamsi@vmware.com", "krishna@vmware.com"], "attribute.reportedaction": ["DENY"], "attribute.reportedRuleId": ["RULE4762"], "attribute.collectorId": [125000], "attribute_rule.name": ["AT_RULE1000000"], "attribute_rule.modelkey_otype": [5200], "attribute_rule.modelkey_oid": [1000000], "attribute_firewallmanager.name": ["AT_firewall_manager1000000"], "attribute_firewallmanager.modelkey_otype": [8], "attribute_firewallmanager.modelkey_oid": [1000000], "activedpIds": [125000], "typeTagsPacked": "KCC0IABACBAA", "protectionStatus": "UNKNOWN_STATUS", "flowAction": "ALLOW", "srcDnsInfo.ipDomain": [167772480], "srcDnsInfo.ip": [167772160], "srcDnsInfo.domainName": ["domain10.0.1.77"], "srcDnsInfo.hostName": ["HOST20"], "srcDnsInfo.source": ["UNKNOWN"], "dstDnsInfo.ipDomain": [167779776], "dstDnsInfo.ip": [167772160], "dstDnsInfo.domainName": ["domain10.0.29.193"], "dstDnsInfo.hostName": ["HOST476"], "dstDnsInfo.source": ["UNKNOWN"], "reporterEntity.collectorId": [125000], "reporterEntity_reporter.name": ["reporter1000000"], "reporterEntity_reporter.modelkey_otype": [917], "reporterEntity_reporter.modelkey_oid": [1000000], "SchemaVersion": 7, "lastActivity": 1559023522, "activity": 779511761, "srck8Info.k8scollectorId": [125000], "srck8Info_k8sservice.name": ["service16"], "srck8Info_k8sservice.modelkey_otype": [1504], "srck8Info_k8sservice.modelkey_oid": [16], "srck8Info_k8scluster.name": ["cluster33"], "srck8Info_k8scluster.modelkey_otype": [1501], "srck8Info_k8scluster.modelkey_oid": [33], "srck8Info_k8snamespace.name": ["namespace13"], "srck8Info_k8snamespace.modelkey_otype": [503], "srck8Info_k8snamespace.modelkey_oid": [13], "srck8Info_k8snode.name": ["node33"], "srck8Info_k8snode.modelkey_otype": [1502], "srck8Info_k8snode.modelkey_oid": [33], "dstk8Info.k8scollectorId": [125000], "dstk8Info_k8sservice.name": ["service380"], "dstk8Info_k8sservice.modelkey_otype": [1504], "dstk8Info_k8sservice.modelkey_oid": [380], "dstk8Info_k8scluster.name": ["cluster761"], "dstk8Info_k8scluster.modelkey_otype": [1501], "dstk8Info_k8scluster.modelkey_oid": [761], "dstk8Info_k8snamespace.name": ["namespace304"], "dstk8Info_k8snamespace.modelkey_otype": [503], "dstk8Info_k8snamespace.modelkey_oid": [304], "dstk8Info_k8snode.name": ["node761"], "dstk8Info_k8snode.modelkey_otype": [1502], "dstk8Info_k8snode.modelkey_oid": [761], "lbflowtype": "LOGICAL", "loadBalancerInfo.type": ["LOGICAL"], "loadBalancerInfo.collectorId": [125000], "loadBalancerInfo.relevantPort": [2099], "loadBalancerInfo_loadbalancervIP.prefixLength": [27], "loadBalancerInfo_loadbalancervIP.ipAddress": ["10.0.1.77"], "loadBalancerInfo_loadbalancervIP.netMask": ["255.255.255.224"], "loadBalancerInfo_loadbalancervIP.networkAddress": ["10.0.1.6"], "loadBalancerInfo_loadbalancervIP.cidr": ["10.0.1.64/27"], "loadBalancerInfo_loadbalancervIP.fstart": [167772480], "loadBalancerInfo_loadbalancervIP.fend": [167772511], "loadBalancerInfo_loadbalancervIP.ipaddresstype": ["SUBNET"], "loadBalancerInfo_loadbalancervIP.privateaddress": [1], "loadBalancerInfo_loadbalancervIP.Source": ["UNKNOWN"], "loadBalancerInfo_loadbalancervIP.Ipmetadata_domain": ["UNKNOWN"], "loadBalancerInfo_loadbalancervIP.Ipmetadata_isp": ["UNKNOWN"], "loadBalancerInfo_loadbalancerinternalIP.prefixLength": [27], "loadBalancerInfo_loadbalancerinternalIP.ipAddress": ["10.0.29.193"], "loadBalancerInfo_loadbalancerinternalIP.netMask": ["255.255.255.224"], "loadBalancerInfo_loadbalancerinternalIP.networkAddress": ["10.0.29.19"], "loadBalancerInfo_loadbalancerinternalIP.cidr": ["10.0.29.192/27"], "loadBalancerInfo_loadbalancerinternalIP.fstart": [167779776], "loadBalancerInfo_loadbalancerinternalIP.fend": [167779807], "loadBalancerInfo_loadbalancerinternalIP.ipaddresstype": ["SUBNET"], "loadBalancerInfo_loadbalancerinternalIP.privateaddress": [1], "loadBalancerInfo_loadbalancerinternalIP.Source": ["UNKNOWN"], "loadBalancerInfo_loadbalancerinternalIP.Ipmetadata_domain": ["UNKNOWN"], "loadBalancerInfo_loadbalancerinternalIP.Ipmetadata_isp": ["UNKNOWN"], "srcIpEntity.name": ["10.0.1.77"], "srcIpEntity.modelkey_otype": [541], "srcIpEntity.modelkey_oid": [166666], "dstIpEntity.name": ["10.0.29.193"], "dstIpEntity.modelkey_otype": [541], "dstIpEntity.modelkey_oid": [200000], "srcNic.name": ["VNIC333"], "srcNic.modelkey_otype": [18], "srcNic.modelkey_oid": [333], "dstNic.name": ["VNIC7617"], "dstNic.modelkey_otype": [17], "dstNic.modelkey_oid": [7617], "srcVm.name": ["VM333"], "srcVm.modelkey_otype": [1601], "srcVm.modelkey_oid": [333], "dstVm.name": ["VM7617"], "dstVm.modelkey_otype": [1601], "dstVm.modelkey_oid": [7617], "srcSg.name": ["SG55"], "srcSg.modelkey_otype": [958], "srcSg.modelkey_oid": [55], "dstSg.name": ["SG1269"], "dstSg.modelkey_otype": [958], "dstSg.modelkey_oid": [1269], "srcIpSet.name": ["IPSET10"], "srcIpSet.modelkey_otype": [214], "srcIpSet.modelkey_oid": [10], "dstIpSet.name": ["IPSET7617"], "dstIpSet.modelkey_otype": [214], "dstIpSet.modelkey_oid": [238], "srcSt.name": ["securitytag55"], "srcSt.modelkey_otype": [99], "srcSt.modelkey_oid": [55], "dstSt.name": ["securitytag1269"], "dstSt.modelkey_otype": [99], "dstSt.modelkey_oid": [1269], "srcL2Net.name": ["Vlan10"], "srcL2Net.modelkey_otype": [13], "srcL2Net.modelkey_oid": [10], "dstL2Net.name": ["Vlan238"], "dstL2Net.modelkey_otype": [13], "dstL2Net.modelkey_oid": [238], "srcGroup.name": ["GROUP3"], "srcGroup.modelkey_otype": [81], "srcGroup.modelkey_oid": [3], "dstGroup.name": ["GROUP76"], "dstGroup.modelkey_otype": [81], "dstGroup.modelkey_oid": [76], "srcCluster.name": ["CLUSTER2"], "srcCluster.modelkey_otype": [66], "srcCluster.modelkey_oid": [2], "dstCluster.name": ["CLUSTER59"], "dstCluster.modelkey_otype": [66], "dstCluster.modelkey_oid": [59], "srcRp.name": ["RP41"], "srcRp.modelkey_otype": [79], "srcRp.modelkey_oid": [41], "dstRp.name": ["RP952"], "dstRp.modelkey_otype": [79], "dstRp.modelkey_oid": [952], "srcDc.name": ["DATACENTER101"], "srcDc.modelkey_otype": [105], "srcDc.modelkey_oid": [1], "dstDc.name": ["DATACENTER101"], "dstDc.modelkey_otype": [105], "dstDc.modelkey_oid": [1], "srcHost.name": ["HOST20"], "srcHost.modelkey_otype": [4], "srcHost.modelkey_oid": [20], "dstHost.name": ["HOST476"], "dstHost.modelkey_otype": [4], "dstHost.modelkey_oid": [476], "svcEP.name": ["10.0.29.193[2055]other"], "svcEP.modelkey_otype": [605], "svcEP.modelkey_oid": [166666], "srcManagers.name": ["NSX0"], "srcManagers.modelkey_otype": [8], "srcManagers.modelkey_oid": [0], "dstManagers.name": ["NSX3"], "dstManagers.modelkey_otype": [612], "dstManagers.modelkey_oid": [3], "flowDomain.name": ["GLOBAL"], "flowDomain.modelkey_otype": [658], "flowDomain.modelkey_oid": [125000], "srcLookupDomain.name": ["GLOBAL"], "srcLookupDomain.modelkey_otype": [197], "srcLookupDomain.modelkey_oid": [125000], "dstLookupDomain.name": ["GLOBAL"], "dstLookupDomain.modelkey_otype": [197], "dstLookupDomain.modelkey_oid": [125000], "srcVpc.name": ["AWS-VPC0"], "srcVpc.modelkey_otype": [603], "srcVpc.modelkey_oid": [0], "dstVpc.name": ["AWS-VPC3"], "dstVpc.modelkey_otype": [603], "dstVpc.modelkey_oid": [3], "srcTransportNode.name": ["TN0"], "srcTransportNode.modelkey_otype": [843], "srcTransportNode.modelkey_oid": [0], "dstTransportNode.name": ["TN3"], "dstTransportNode.modelkey_otype": [843], "dstTransportNode.modelkey_oid": [3], "srcDvpg.name": ["DVPG83"], "srcDvpg.modelkey_otype": [3], "srcDvpg.modelkey_oid": [83], "dstDvpg.name": ["DVPG1904"], "dstDvpg.modelkey_otype": [3], "dstDvpg.modelkey_oid": [1904], "srcDvs.name": ["DVS2"], "srcDvs.modelkey_otype": [2], "srcDvs.modelkey_oid": [2], "dstDvs.name": ["DVS63"], "dstDvs.modelkey_otype": [2], "dstDvs.modelkey_oid": [63]}]
csv_file = "badri3.csv"
def writetocsv(a,diction):
    #csv_file = f"csvfile{a}.csv"

#csv_file = "Names1.csv"
    global flagg
    try:
        with open(csv_file, 'a') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=csv_columns)
            if flagg == 0:
                writer.writeheader()
                flagg = 1
            for data in diction:
                writer.writerow(data)
    except IOError:
        print("I/O error")
if __name__ == '__main__':
    for i in range(5):
        writetocsv(i,my_dict)
